// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: finance_service.proto

package finance_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HealthCheckService_HealthCheck_FullMethodName = "/finance_service.HealthCheckService/HealthCheck"
)

// HealthCheckServiceClient is the client API for HealthCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckServiceClient(cc grpc.ClientConnInterface) HealthCheckServiceClient {
	return &healthCheckServiceClient{cc}
}

func (c *healthCheckServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServiceServer is the server API for HealthCheckService service.
// All implementations must embed UnimplementedHealthCheckServiceServer
// for forward compatibility
type HealthCheckServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthCheckServiceServer()
}

// UnimplementedHealthCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServiceServer struct {
}

func (UnimplementedHealthCheckServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedHealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {}

// UnsafeHealthCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServiceServer will
// result in compilation errors.
type UnsafeHealthCheckServiceServer interface {
	mustEmbedUnimplementedHealthCheckServiceServer()
}

func RegisterHealthCheckServiceServer(s grpc.ServiceRegistrar, srv HealthCheckServiceServer) {
	s.RegisterService(&HealthCheckService_ServiceDesc, srv)
}

func _HealthCheckService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckService_ServiceDesc is the grpc.ServiceDesc for HealthCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_service.HealthCheckService",
	HandlerType: (*HealthCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _HealthCheckService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance_service.proto",
}

const (
	TariffService_Create_FullMethodName   = "/finance_service.TariffService/Create"
	TariffService_Get_FullMethodName      = "/finance_service.TariffService/Get"
	TariffService_Find_FullMethodName     = "/finance_service.TariffService/Find"
	TariffService_MakeMain_FullMethodName = "/finance_service.TariffService/MakeMain"
)

// TariffServiceClient is the client API for TariffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TariffServiceClient interface {
	Create(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error)
	Get(ctx context.Context, in *GetOptions, opts ...grpc.CallOption) (*Tariff, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*TariffList, error)
	MakeMain(ctx context.Context, in *MakeMainOptions, opts ...grpc.CallOption) (*Empty, error)
}

type tariffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTariffServiceClient(cc grpc.ClientConnInterface) TariffServiceClient {
	return &tariffServiceClient{cc}
}

func (c *tariffServiceClient) Create(ctx context.Context, in *Tariff, opts ...grpc.CallOption) (*Tariff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tariff)
	err := c.cc.Invoke(ctx, TariffService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Get(ctx context.Context, in *GetOptions, opts ...grpc.CallOption) (*Tariff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tariff)
	err := c.cc.Invoke(ctx, TariffService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*TariffList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TariffList)
	err := c.cc.Invoke(ctx, TariffService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tariffServiceClient) MakeMain(ctx context.Context, in *MakeMainOptions, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TariffService_MakeMain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TariffServiceServer is the server API for TariffService service.
// All implementations must embed UnimplementedTariffServiceServer
// for forward compatibility
type TariffServiceServer interface {
	Create(context.Context, *Tariff) (*Tariff, error)
	Get(context.Context, *GetOptions) (*Tariff, error)
	Find(context.Context, *GetListFilter) (*TariffList, error)
	MakeMain(context.Context, *MakeMainOptions) (*Empty, error)
	mustEmbedUnimplementedTariffServiceServer()
}

// UnimplementedTariffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTariffServiceServer struct {
}

func (UnimplementedTariffServiceServer) Create(context.Context, *Tariff) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTariffServiceServer) Get(context.Context, *GetOptions) (*Tariff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTariffServiceServer) Find(context.Context, *GetListFilter) (*TariffList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedTariffServiceServer) MakeMain(context.Context, *MakeMainOptions) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMain not implemented")
}
func (UnimplementedTariffServiceServer) mustEmbedUnimplementedTariffServiceServer() {}

// UnsafeTariffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TariffServiceServer will
// result in compilation errors.
type UnsafeTariffServiceServer interface {
	mustEmbedUnimplementedTariffServiceServer()
}

func RegisterTariffServiceServer(s grpc.ServiceRegistrar, srv TariffServiceServer) {
	s.RegisterService(&TariffService_ServiceDesc, srv)
}

func _TariffService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tariff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TariffService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Create(ctx, req.(*Tariff))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TariffService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Get(ctx, req.(*GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TariffService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TariffService_MakeMain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMainOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TariffServiceServer).MakeMain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TariffService_MakeMain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TariffServiceServer).MakeMain(ctx, req.(*MakeMainOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// TariffService_ServiceDesc is the grpc.ServiceDesc for TariffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TariffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_service.TariffService",
	HandlerType: (*TariffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TariffService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TariffService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _TariffService_Find_Handler,
		},
		{
			MethodName: "MakeMain",
			Handler:    _TariffService_MakeMain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance_service.proto",
}

const (
	CompanyBalanceService_Create_FullMethodName                  = "/finance_service.CompanyBalanceService/Create"
	CompanyBalanceService_Update_FullMethodName                  = "/finance_service.CompanyBalanceService/Update"
	CompanyBalanceService_Get_FullMethodName                     = "/finance_service.CompanyBalanceService/Get"
	CompanyBalanceService_GetBalanceHistory_FullMethodName       = "/finance_service.CompanyBalanceService/GetBalanceHistory"
	CompanyBalanceService_Find_FullMethodName                    = "/finance_service.CompanyBalanceService/Find"
	CompanyBalanceService_BlockCompany_FullMethodName            = "/finance_service.CompanyBalanceService/BlockCompany"
	CompanyBalanceService_CompanyFirstBillingDate_FullMethodName = "/finance_service.CompanyBalanceService/CompanyFirstBillingDate"
)

// CompanyBalanceServiceClient is the client API for CompanyBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyBalanceServiceClient interface {
	Create(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *UpdateBalance, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error)
	GetBalanceHistory(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*CompanyBalanceHistoryList, error)
	Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*SubscriptionList, error)
	BlockCompany(ctx context.Context, in *BlockCompanyData, opts ...grpc.CallOption) (*Empty, error)
	CompanyFirstBillingDate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type companyBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyBalanceServiceClient(cc grpc.ClientConnInterface) CompanyBalanceServiceClient {
	return &companyBalanceServiceClient{cc}
}

func (c *companyBalanceServiceClient) Create(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CompanyBalanceService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) Update(ctx context.Context, in *UpdateBalance, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CompanyBalanceService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, CompanyBalanceService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) GetBalanceHistory(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*CompanyBalanceHistoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompanyBalanceHistoryList)
	err := c.cc.Invoke(ctx, CompanyBalanceService_GetBalanceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) Find(ctx context.Context, in *GetListFilter, opts ...grpc.CallOption) (*SubscriptionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionList)
	err := c.cc.Invoke(ctx, CompanyBalanceService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) BlockCompany(ctx context.Context, in *BlockCompanyData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CompanyBalanceService_BlockCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyBalanceServiceClient) CompanyFirstBillingDate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CompanyBalanceService_CompanyFirstBillingDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyBalanceServiceServer is the server API for CompanyBalanceService service.
// All implementations must embed UnimplementedCompanyBalanceServiceServer
// for forward compatibility
type CompanyBalanceServiceServer interface {
	Create(context.Context, *Id) (*Empty, error)
	Update(context.Context, *UpdateBalance) (*Empty, error)
	Get(context.Context, *Id) (*Company, error)
	GetBalanceHistory(context.Context, *GetListFilter) (*CompanyBalanceHistoryList, error)
	Find(context.Context, *GetListFilter) (*SubscriptionList, error)
	BlockCompany(context.Context, *BlockCompanyData) (*Empty, error)
	CompanyFirstBillingDate(context.Context, *Id) (*Empty, error)
	mustEmbedUnimplementedCompanyBalanceServiceServer()
}

// UnimplementedCompanyBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyBalanceServiceServer struct {
}

func (UnimplementedCompanyBalanceServiceServer) Create(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) Update(context.Context, *UpdateBalance) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) Get(context.Context, *Id) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) GetBalanceHistory(context.Context, *GetListFilter) (*CompanyBalanceHistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceHistory not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) Find(context.Context, *GetListFilter) (*SubscriptionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) BlockCompany(context.Context, *BlockCompanyData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockCompany not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) CompanyFirstBillingDate(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyFirstBillingDate not implemented")
}
func (UnimplementedCompanyBalanceServiceServer) mustEmbedUnimplementedCompanyBalanceServiceServer() {}

// UnsafeCompanyBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyBalanceServiceServer will
// result in compilation errors.
type UnsafeCompanyBalanceServiceServer interface {
	mustEmbedUnimplementedCompanyBalanceServiceServer()
}

func RegisterCompanyBalanceServiceServer(s grpc.ServiceRegistrar, srv CompanyBalanceServiceServer) {
	s.RegisterService(&CompanyBalanceService_ServiceDesc, srv)
}

func _CompanyBalanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).Create(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).Update(ctx, req.(*UpdateBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_GetBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).GetBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_GetBalanceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).GetBalanceHistory(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).Find(ctx, req.(*GetListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_BlockCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockCompanyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).BlockCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_BlockCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).BlockCompany(ctx, req.(*BlockCompanyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyBalanceService_CompanyFirstBillingDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyBalanceServiceServer).CompanyFirstBillingDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyBalanceService_CompanyFirstBillingDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyBalanceServiceServer).CompanyFirstBillingDate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyBalanceService_ServiceDesc is the grpc.ServiceDesc for CompanyBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_service.CompanyBalanceService",
	HandlerType: (*CompanyBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompanyBalanceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CompanyBalanceService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CompanyBalanceService_Get_Handler,
		},
		{
			MethodName: "GetBalanceHistory",
			Handler:    _CompanyBalanceService_GetBalanceHistory_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _CompanyBalanceService_Find_Handler,
		},
		{
			MethodName: "BlockCompany",
			Handler:    _CompanyBalanceService_BlockCompany_Handler,
		},
		{
			MethodName: "CompanyFirstBillingDate",
			Handler:    _CompanyBalanceService_CompanyFirstBillingDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance_service.proto",
}

const (
	BillingService_CreatBilling_FullMethodName      = "/finance_service.BillingService/CreatBilling"
	BillingService_CreateInovice_FullMethodName     = "/finance_service.BillingService/CreateInovice"
	BillingService_GetListInovice_FullMethodName    = "/finance_service.BillingService/GetListInovice"
	BillingService_GetListBilling_FullMethodName    = "/finance_service.BillingService/GetListBilling"
	BillingService_ChangeTruckStatus_FullMethodName = "/finance_service.BillingService/ChangeTruckStatus"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	CreatBilling(ctx context.Context, in *BillingObject, opts ...grpc.CallOption) (*Empty, error)
	CreateInovice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Empty, error)
	GetListInovice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*InvoiceList, error)
	GetListBilling(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Billings, error)
	ChangeTruckStatus(ctx context.Context, in *TruckStatusChanger, opts ...grpc.CallOption) (*Empty, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) CreatBilling(ctx context.Context, in *BillingObject, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BillingService_CreatBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateInovice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BillingService_CreateInovice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetListInovice(ctx context.Context, in *Id, opts ...grpc.CallOption) (*InvoiceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceList)
	err := c.cc.Invoke(ctx, BillingService_GetListInovice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetListBilling(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Billings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Billings)
	err := c.cc.Invoke(ctx, BillingService_GetListBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ChangeTruckStatus(ctx context.Context, in *TruckStatusChanger, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BillingService_ChangeTruckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	CreatBilling(context.Context, *BillingObject) (*Empty, error)
	CreateInovice(context.Context, *Invoice) (*Empty, error)
	GetListInovice(context.Context, *Id) (*InvoiceList, error)
	GetListBilling(context.Context, *Id) (*Billings, error)
	ChangeTruckStatus(context.Context, *TruckStatusChanger) (*Empty, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) CreatBilling(context.Context, *BillingObject) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatBilling not implemented")
}
func (UnimplementedBillingServiceServer) CreateInovice(context.Context, *Invoice) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInovice not implemented")
}
func (UnimplementedBillingServiceServer) GetListInovice(context.Context, *Id) (*InvoiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListInovice not implemented")
}
func (UnimplementedBillingServiceServer) GetListBilling(context.Context, *Id) (*Billings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBilling not implemented")
}
func (UnimplementedBillingServiceServer) ChangeTruckStatus(context.Context, *TruckStatusChanger) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTruckStatus not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_CreatBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreatBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreatBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreatBilling(ctx, req.(*BillingObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateInovice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateInovice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateInovice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateInovice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetListInovice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetListInovice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetListInovice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetListInovice(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetListBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetListBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetListBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetListBilling(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ChangeTruckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruckStatusChanger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ChangeTruckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ChangeTruckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ChangeTruckStatus(ctx, req.(*TruckStatusChanger))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_service.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatBilling",
			Handler:    _BillingService_CreatBilling_Handler,
		},
		{
			MethodName: "CreateInovice",
			Handler:    _BillingService_CreateInovice_Handler,
		},
		{
			MethodName: "GetListInovice",
			Handler:    _BillingService_GetListInovice_Handler,
		},
		{
			MethodName: "GetListBilling",
			Handler:    _BillingService_GetListBilling_Handler,
		},
		{
			MethodName: "ChangeTruckStatus",
			Handler:    _BillingService_ChangeTruckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance_service.proto",
}
