// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: driver.proto

package company_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	User              *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	Vehicle           *Object         `protobuf:"bytes,3,opt,name=vehicle,proto3" json:"vehicle"`
	Address           *Address        `protobuf:"bytes,4,opt,name=address,proto3" json:"address"`
	Settings          *DriverSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings"`
	Company           *Object         `protobuf:"bytes,6,opt,name=company,proto3" json:"company"`
	CoDriver          *Object         `protobuf:"bytes,7,opt,name=co_driver,json=coDriver,proto3" json:"co_driver"`
	LicenseState      *Object         `protobuf:"bytes,8,opt,name=license_state,json=licenseState,proto3" json:"license_state"`
	LicenceNumber     string          `protobuf:"bytes,9,opt,name=licence_number,json=licenceNumber,proto3" json:"licence_number"`
	Signature         string          `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature"`
	Status            string          `protobuf:"bytes,11,opt,name=status,proto3" json:"status"`
	IsOnline          bool            `protobuf:"varint,12,opt,name=is_online,json=isOnline,proto3" json:"is_online"`
	LastActivatedAt   string          `protobuf:"bytes,13,opt,name=last_activated_at,json=lastActivatedAt,proto3" json:"last_activated_at"`
	LastInactivatedAt string          `protobuf:"bytes,14,opt,name=last_inactivated_at,json=lastInactivatedAt,proto3" json:"last_inactivated_at"`
	Note              string          `protobuf:"bytes,15,opt,name=note,proto3" json:"note"`
	CreatedAt         string          `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt         string          `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Break             string          `protobuf:"bytes,18,opt,name=break,proto3" json:"break"`
	Drive             string          `protobuf:"bytes,19,opt,name=drive,proto3" json:"drive"`
	Shift             string          `protobuf:"bytes,20,opt,name=shift,proto3" json:"shift"`
	Cycle             string          `protobuf:"bytes,21,opt,name=cycle,proto3" json:"cycle"`
	Recap             string          `protobuf:"bytes,22,opt,name=recap,proto3" json:"recap"`
	Unit              *Unit           `protobuf:"bytes,23,opt,name=unit,proto3" json:"unit"`
	Timer             *Timer          `protobuf:"bytes,24,opt,name=timer,proto3" json:"timer"`
	DriverDevice      *DriverDevice   `protobuf:"bytes,25,opt,name=driver_device,json=driverDevice,proto3" json:"driver_device"`
	LastState         *LastState      `protobuf:"bytes,26,opt,name=last_state,json=lastState,proto3" json:"last_state"`
	DriverCompany     *Company        `protobuf:"bytes,27,opt,name=driver_company,json=driverCompany,proto3" json:"driver_company"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{0}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Driver) GetVehicle() *Object {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *Driver) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Driver) GetSettings() *DriverSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Driver) GetCompany() *Object {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Driver) GetCoDriver() *Object {
	if x != nil {
		return x.CoDriver
	}
	return nil
}

func (x *Driver) GetLicenseState() *Object {
	if x != nil {
		return x.LicenseState
	}
	return nil
}

func (x *Driver) GetLicenceNumber() string {
	if x != nil {
		return x.LicenceNumber
	}
	return ""
}

func (x *Driver) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Driver) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Driver) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Driver) GetLastActivatedAt() string {
	if x != nil {
		return x.LastActivatedAt
	}
	return ""
}

func (x *Driver) GetLastInactivatedAt() string {
	if x != nil {
		return x.LastInactivatedAt
	}
	return ""
}

func (x *Driver) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Driver) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Driver) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Driver) GetBreak() string {
	if x != nil {
		return x.Break
	}
	return ""
}

func (x *Driver) GetDrive() string {
	if x != nil {
		return x.Drive
	}
	return ""
}

func (x *Driver) GetShift() string {
	if x != nil {
		return x.Shift
	}
	return ""
}

func (x *Driver) GetCycle() string {
	if x != nil {
		return x.Cycle
	}
	return ""
}

func (x *Driver) GetRecap() string {
	if x != nil {
		return x.Recap
	}
	return ""
}

func (x *Driver) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Driver) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *Driver) GetDriverDevice() *DriverDevice {
	if x != nil {
		return x.DriverDevice
	}
	return nil
}

func (x *Driver) GetLastState() *LastState {
	if x != nil {
		return x.LastState
	}
	return nil
}

func (x *Driver) GetDriverCompany() *Company {
	if x != nil {
		return x.DriverCompany
	}
	return nil
}

type DriverSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AllowPersonalConveyance  bool   `protobuf:"varint,2,opt,name=allow_personal_conveyance,json=allowPersonalConveyance,proto3" json:"allow_personal_conveyance"`
	AllowYardMove            bool   `protobuf:"varint,3,opt,name=allow_yard_move,json=allowYardMove,proto3" json:"allow_yard_move"`
	EnableSsb                bool   `protobuf:"varint,4,opt,name=enable_ssb,json=enableSsb,proto3" json:"enable_ssb"`
	EnableShortHaul          bool   `protobuf:"varint,5,opt,name=enable_short_haul,json=enableShortHaul,proto3" json:"enable_short_haul"`
	AdverseDrivingConditions bool   `protobuf:"varint,6,opt,name=adverse_driving_conditions,json=adverseDrivingConditions,proto3" json:"adverse_driving_conditions"`
	DisableCorrection        bool   `protobuf:"varint,7,opt,name=disable_correction,json=disableCorrection,proto3" json:"disable_correction"`
}

func (x *DriverSettings) Reset() {
	*x = DriverSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverSettings) ProtoMessage() {}

func (x *DriverSettings) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverSettings.ProtoReflect.Descriptor instead.
func (*DriverSettings) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{1}
}

func (x *DriverSettings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriverSettings) GetAllowPersonalConveyance() bool {
	if x != nil {
		return x.AllowPersonalConveyance
	}
	return false
}

func (x *DriverSettings) GetAllowYardMove() bool {
	if x != nil {
		return x.AllowYardMove
	}
	return false
}

func (x *DriverSettings) GetEnableSsb() bool {
	if x != nil {
		return x.EnableSsb
	}
	return false
}

func (x *DriverSettings) GetEnableShortHaul() bool {
	if x != nil {
		return x.EnableShortHaul
	}
	return false
}

func (x *DriverSettings) GetAdverseDrivingConditions() bool {
	if x != nil {
		return x.AdverseDrivingConditions
	}
	return false
}

func (x *DriverSettings) GetDisableCorrection() bool {
	if x != nil {
		return x.DisableCorrection
	}
	return false
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName   string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName    string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	UserName    string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email"`
	Password    string `protobuf:"bytes,6,opt,name=password,proto3" json:"password"`
	PhoneNumber string `protobuf:"bytes,7,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	UserTypeId  string `protobuf:"bytes,8,opt,name=user_type_id,json=userTypeId,proto3" json:"user_type_id"`
	RoleId      string `protobuf:"bytes,9,opt,name=role_id,json=roleId,proto3" json:"role_id"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *User) GetUserTypeId() string {
	if x != nil {
		return x.UserTypeId
	}
	return ""
}

func (x *User) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type UserMenusPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Slug      string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	ParentId  string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	CanCreate bool   `protobuf:"varint,5,opt,name=can_create,json=canCreate,proto3" json:"can_create"`
	CanUpdate bool   `protobuf:"varint,6,opt,name=can_update,json=canUpdate,proto3" json:"can_update"`
	CanGet    bool   `protobuf:"varint,7,opt,name=can_get,json=canGet,proto3" json:"can_get"`
	CanDelete bool   `protobuf:"varint,8,opt,name=can_delete,json=canDelete,proto3" json:"can_delete"`
	Icon      string `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon"`
}

func (x *UserMenusPermission) Reset() {
	*x = UserMenusPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMenusPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMenusPermission) ProtoMessage() {}

func (x *UserMenusPermission) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMenusPermission.ProtoReflect.Descriptor instead.
func (*UserMenusPermission) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{3}
}

func (x *UserMenusPermission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserMenusPermission) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *UserMenusPermission) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserMenusPermission) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *UserMenusPermission) GetCanCreate() bool {
	if x != nil {
		return x.CanCreate
	}
	return false
}

func (x *UserMenusPermission) GetCanUpdate() bool {
	if x != nil {
		return x.CanUpdate
	}
	return false
}

func (x *UserMenusPermission) GetCanGet() bool {
	if x != nil {
		return x.CanGet
	}
	return false
}

func (x *UserMenusPermission) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *UserMenusPermission) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type UploadDrivers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver         []*Driver         `protobuf:"bytes,1,rep,name=driver,proto3" json:"driver"`
	DriverSettings []*DriverSettings `protobuf:"bytes,2,rep,name=driver_settings,json=driverSettings,proto3" json:"driver_settings"`
}

func (x *UploadDrivers) Reset() {
	*x = UploadDrivers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDrivers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDrivers) ProtoMessage() {}

func (x *UploadDrivers) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDrivers.ProtoReflect.Descriptor instead.
func (*UploadDrivers) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{4}
}

func (x *UploadDrivers) GetDriver() []*Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *UploadDrivers) GetDriverSettings() []*DriverSettings {
	if x != nil {
		return x.DriverSettings
	}
	return nil
}

type DriverDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId      string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id"` // same as driver id
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	Os            string `protobuf:"bytes,3,opt,name=os,proto3" json:"os"`
	Battery       int32  `protobuf:"varint,4,opt,name=battery,proto3" json:"battery"`
	DeviceTime    string `protobuf:"bytes,5,opt,name=device_time,json=deviceTime,proto3" json:"device_time"`
	Bluetooth     bool   `protobuf:"varint,6,opt,name=bluetooth,proto3" json:"bluetooth"`
	Camera        bool   `protobuf:"varint,7,opt,name=camera,proto3" json:"camera"`
	Gps           bool   `protobuf:"varint,8,opt,name=gps,proto3" json:"gps"`
	Location      bool   `protobuf:"varint,9,opt,name=location,proto3" json:"location"`
	EldConnection bool   `protobuf:"varint,10,opt,name=eld_connection,json=eldConnection,proto3" json:"eld_connection"`
	SystemSound   bool   `protobuf:"varint,11,opt,name=system_sound,json=systemSound,proto3" json:"system_sound"`
}

func (x *DriverDevice) Reset() {
	*x = DriverDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverDevice) ProtoMessage() {}

func (x *DriverDevice) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverDevice.ProtoReflect.Descriptor instead.
func (*DriverDevice) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{5}
}

func (x *DriverDevice) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *DriverDevice) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DriverDevice) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DriverDevice) GetBattery() int32 {
	if x != nil {
		return x.Battery
	}
	return 0
}

func (x *DriverDevice) GetDeviceTime() string {
	if x != nil {
		return x.DeviceTime
	}
	return ""
}

func (x *DriverDevice) GetBluetooth() bool {
	if x != nil {
		return x.Bluetooth
	}
	return false
}

func (x *DriverDevice) GetCamera() bool {
	if x != nil {
		return x.Camera
	}
	return false
}

func (x *DriverDevice) GetGps() bool {
	if x != nil {
		return x.Gps
	}
	return false
}

func (x *DriverDevice) GetLocation() bool {
	if x != nil {
		return x.Location
	}
	return false
}

func (x *DriverDevice) GetEldConnection() bool {
	if x != nil {
		return x.EldConnection
	}
	return false
}

func (x *DriverDevice) GetSystemSound() bool {
	if x != nil {
		return x.SystemSound
	}
	return false
}

type DriverListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	UserId        string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	FirstName     string     `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName      string     `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	UserName      string     `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name"`
	DriverType    string     `protobuf:"bytes,6,opt,name=driver_type,json=driverType,proto3" json:"driver_type"`
	Note          string     `protobuf:"bytes,7,opt,name=note,proto3" json:"note"`
	DeviceOs      string     `protobuf:"bytes,8,opt,name=device_os,json=deviceOs,proto3" json:"device_os"`
	DeviceVersion string     `protobuf:"bytes,9,opt,name=device_version,json=deviceVersion,proto3" json:"device_version"`
	DeviceTime    string     `protobuf:"bytes,10,opt,name=device_time,json=deviceTime,proto3" json:"device_time"`
	DeviceId      string     `protobuf:"bytes,11,opt,name=device_id,json=deviceId,proto3" json:"device_id"`
	CreatedAt     string     `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     string     `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Unit          *Object    `protobuf:"bytes,14,opt,name=unit,proto3" json:"unit"`
	Codriver      *Object    `protobuf:"bytes,15,opt,name=codriver,proto3" json:"codriver"`
	LastState     *LastState `protobuf:"bytes,16,opt,name=last_state,json=lastState,proto3" json:"last_state"`
	Timer         *Timer     `protobuf:"bytes,17,opt,name=timer,proto3" json:"timer"`
}

func (x *DriverListItem) Reset() {
	*x = DriverListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverListItem) ProtoMessage() {}

func (x *DriverListItem) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverListItem.ProtoReflect.Descriptor instead.
func (*DriverListItem) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{6}
}

func (x *DriverListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriverListItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DriverListItem) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *DriverListItem) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *DriverListItem) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DriverListItem) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *DriverListItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DriverListItem) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *DriverListItem) GetDeviceVersion() string {
	if x != nil {
		return x.DeviceVersion
	}
	return ""
}

func (x *DriverListItem) GetDeviceTime() string {
	if x != nil {
		return x.DeviceTime
	}
	return ""
}

func (x *DriverListItem) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DriverListItem) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DriverListItem) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DriverListItem) GetUnit() *Object {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *DriverListItem) GetCodriver() *Object {
	if x != nil {
		return x.Codriver
	}
	return nil
}

func (x *DriverListItem) GetLastState() *LastState {
	if x != nil {
		return x.LastState
	}
	return nil
}

func (x *DriverListItem) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

type DriverListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*DriverListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *DriverListResponse) Reset() {
	*x = DriverListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverListResponse) ProtoMessage() {}

func (x *DriverListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverListResponse.ProtoReflect.Descriptor instead.
func (*DriverListResponse) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{7}
}

func (x *DriverListResponse) GetItems() []*DriverListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DriverListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Break int64 `protobuf:"varint,1,opt,name=break,proto3" json:"break"`
	Drive int64 `protobuf:"varint,2,opt,name=drive,proto3" json:"drive"`
	Shift int64 `protobuf:"varint,3,opt,name=shift,proto3" json:"shift"`
	Cycle int64 `protobuf:"varint,4,opt,name=cycle,proto3" json:"cycle"`
	Recap int64 `protobuf:"varint,5,opt,name=recap,proto3" json:"recap"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{8}
}

func (x *Timer) GetBreak() int64 {
	if x != nil {
		return x.Break
	}
	return 0
}

func (x *Timer) GetDrive() int64 {
	if x != nil {
		return x.Drive
	}
	return 0
}

func (x *Timer) GetShift() int64 {
	if x != nil {
		return x.Shift
	}
	return 0
}

func (x *Timer) GetCycle() int64 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

func (x *Timer) GetRecap() int64 {
	if x != nil {
		return x.Recap
	}
	return 0
}

type MultipleDriver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Metatitle string `protobuf:"bytes,2,opt,name=metatitle,proto3" json:"metatitle"`
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
}

func (x *MultipleDriver) Reset() {
	*x = MultipleDriver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleDriver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleDriver) ProtoMessage() {}

func (x *MultipleDriver) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleDriver.ProtoReflect.Descriptor instead.
func (*MultipleDriver) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{9}
}

func (x *MultipleDriver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultipleDriver) GetMetatitle() string {
	if x != nil {
		return x.Metatitle
	}
	return ""
}

func (x *MultipleDriver) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type MultipleDriverList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MultipleDriver `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *MultipleDriverList) Reset() {
	*x = MultipleDriverList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_driver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleDriverList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleDriverList) ProtoMessage() {}

func (x *MultipleDriverList) ProtoReflect() protoreflect.Message {
	mi := &file_driver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleDriverList.ProtoReflect.Descriptor instead.
func (*MultipleDriverList) Descriptor() ([]byte, []int) {
	return file_driver_proto_rawDescGZIP(), []int{10}
}

func (x *MultipleDriverList) GetItems() []*MultipleDriver {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MultipleDriverList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_driver_proto protoreflect.FileDescriptor

var file_driver_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbd, 0x08, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x0a,
	0x09, 0x63, 0x6f, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x63, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x63, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x79, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x59,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x73, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x73, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x75, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61,
	0x75, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xff, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xd2, 0x04, 0x0a, 0x0e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x61, 0x0a,
	0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x75, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x65, 0x63, 0x61, 0x70, 0x22, 0x57, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x61, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_driver_proto_rawDescOnce sync.Once
	file_driver_proto_rawDescData = file_driver_proto_rawDesc
)

func file_driver_proto_rawDescGZIP() []byte {
	file_driver_proto_rawDescOnce.Do(func() {
		file_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_driver_proto_rawDescData)
	})
	return file_driver_proto_rawDescData
}

var file_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_driver_proto_goTypes = []any{
	(*Driver)(nil),              // 0: company_service.Driver
	(*DriverSettings)(nil),      // 1: company_service.DriverSettings
	(*User)(nil),                // 2: company_service.User
	(*UserMenusPermission)(nil), // 3: company_service.UserMenusPermission
	(*UploadDrivers)(nil),       // 4: company_service.UploadDrivers
	(*DriverDevice)(nil),        // 5: company_service.DriverDevice
	(*DriverListItem)(nil),      // 6: company_service.DriverListItem
	(*DriverListResponse)(nil),  // 7: company_service.DriverListResponse
	(*Timer)(nil),               // 8: company_service.Timer
	(*MultipleDriver)(nil),      // 9: company_service.MultipleDriver
	(*MultipleDriverList)(nil),  // 10: company_service.MultipleDriverList
	(*Object)(nil),              // 11: company_service.Object
	(*Address)(nil),             // 12: company_service.Address
	(*Unit)(nil),                // 13: company_service.Unit
	(*LastState)(nil),           // 14: company_service.LastState
	(*Company)(nil),             // 15: company_service.Company
}
var file_driver_proto_depIdxs = []int32{
	2,  // 0: company_service.Driver.user:type_name -> company_service.User
	11, // 1: company_service.Driver.vehicle:type_name -> company_service.Object
	12, // 2: company_service.Driver.address:type_name -> company_service.Address
	1,  // 3: company_service.Driver.settings:type_name -> company_service.DriverSettings
	11, // 4: company_service.Driver.company:type_name -> company_service.Object
	11, // 5: company_service.Driver.co_driver:type_name -> company_service.Object
	11, // 6: company_service.Driver.license_state:type_name -> company_service.Object
	13, // 7: company_service.Driver.unit:type_name -> company_service.Unit
	8,  // 8: company_service.Driver.timer:type_name -> company_service.Timer
	5,  // 9: company_service.Driver.driver_device:type_name -> company_service.DriverDevice
	14, // 10: company_service.Driver.last_state:type_name -> company_service.LastState
	15, // 11: company_service.Driver.driver_company:type_name -> company_service.Company
	0,  // 12: company_service.UploadDrivers.driver:type_name -> company_service.Driver
	1,  // 13: company_service.UploadDrivers.driver_settings:type_name -> company_service.DriverSettings
	11, // 14: company_service.DriverListItem.unit:type_name -> company_service.Object
	11, // 15: company_service.DriverListItem.codriver:type_name -> company_service.Object
	14, // 16: company_service.DriverListItem.last_state:type_name -> company_service.LastState
	8,  // 17: company_service.DriverListItem.timer:type_name -> company_service.Timer
	6,  // 18: company_service.DriverListResponse.items:type_name -> company_service.DriverListItem
	9,  // 19: company_service.MultipleDriverList.items:type_name -> company_service.MultipleDriver
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_driver_proto_init() }
func file_driver_proto_init() {
	if File_driver_proto != nil {
		return
	}
	file_company_models_proto_init()
	file_unit_proto_init()
	file_company_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_driver_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DriverSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UserMenusPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UploadDrivers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DriverDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DriverListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DriverListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MultipleDriver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_driver_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MultipleDriverList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_driver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_driver_proto_goTypes,
		DependencyIndexes: file_driver_proto_depIdxs,
		MessageInfos:      file_driver_proto_msgTypes,
	}.Build()
	File_driver_proto = out.File
	file_driver_proto_rawDesc = nil
	file_driver_proto_goTypes = nil
	file_driver_proto_depIdxs = nil
}
