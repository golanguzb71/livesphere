// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: eld_logs.proto

package event_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinates) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Coordinates) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	State            string       `protobuf:"bytes,2,opt,name=state,proto3" json:"state"`
	Coordinates      *Coordinates `protobuf:"bytes,3,opt,name=coordinates,proto3" json:"coordinates"`
	EldCoordinates   *Coordinates `protobuf:"bytes,4,opt,name=eld_coordinates,json=eldCoordinates,proto3" json:"eld_coordinates"`
	GpsCoordinates   *Coordinates `protobuf:"bytes,5,opt,name=gps_coordinates,json=gpsCoordinates,proto3" json:"gps_coordinates"`
	FusedCoordinates *Coordinates `protobuf:"bytes,6,opt,name=fused_coordinates,json=fusedCoordinates,proto3" json:"fused_coordinates"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Address) GetEldCoordinates() *Coordinates {
	if x != nil {
		return x.EldCoordinates
	}
	return nil
}

func (x *Address) GetGpsCoordinates() *Coordinates {
	if x != nil {
		return x.GpsCoordinates
	}
	return nil
}

func (x *Address) GetFusedCoordinates() *Coordinates {
	if x != nil {
		return x.FusedCoordinates
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IncrementId      int64    `protobuf:"varint,2,opt,name=increment_id,json=incrementId,proto3" json:"increment_id"`
	EventType        int32    `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3" json:"event_type"`
	EventCode        int32    `protobuf:"varint,4,opt,name=event_code,json=eventCode,proto3" json:"event_code"`
	OriginCode       int32    `protobuf:"varint,5,opt,name=origin_code,json=originCode,proto3" json:"origin_code"`
	CompanyId        string   `protobuf:"bytes,6,opt,name=company_id,json=companyId,proto3" json:"company_id"`
	UnitId           string   `protobuf:"bytes,7,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`
	DriverId         string   `protobuf:"bytes,8,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	CoDriverId       string   `protobuf:"bytes,9,opt,name=co_driver_id,json=coDriverId,proto3" json:"co_driver_id"`
	Address          *Address `protobuf:"bytes,10,opt,name=address,proto3" json:"address"`
	Odometer         float32  `protobuf:"fixed32,11,opt,name=odometer,proto3" json:"odometer"`
	EngineHours      float32  `protobuf:"fixed32,12,opt,name=engine_hours,json=engineHours,proto3" json:"engine_hours"`
	EldAddress       string   `protobuf:"bytes,13,opt,name=eld_address,json=eldAddress,proto3" json:"eld_address"`
	VinNumber        string   `protobuf:"bytes,14,opt,name=vin_number,json=vinNumber,proto3" json:"vin_number"`
	Status           string   `protobuf:"bytes,15,opt,name=status,proto3" json:"status"`
	Creator          string   `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator"`
	Trailer          string   `protobuf:"bytes,17,opt,name=trailer,proto3" json:"trailer"`
	Note             string   `protobuf:"bytes,18,opt,name=note,proto3" json:"note"`
	ShippingDocument string   `protobuf:"bytes,19,opt,name=shipping_document,json=shippingDocument,proto3" json:"shipping_document"`
	IsLocked         bool     `protobuf:"varint,20,opt,name=is_locked,json=isLocked,proto3" json:"is_locked"`
	DriverSign       string   `protobuf:"bytes,21,opt,name=driver_sign,json=driverSign,proto3" json:"driver_sign"`
	CertifyTime      string   `protobuf:"bytes,22,opt,name=certify_time,json=certifyTime,proto3" json:"certify_time"`
	StartTime        string   `protobuf:"bytes,23,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime          string   `protobuf:"bytes,24,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	CreatedAt        string   `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        string   `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	UnitNumber       string   `protobuf:"bytes,27,opt,name=unit_number,json=unitNumber,proto3" json:"unit_number"`
	Cycles           []string `protobuf:"bytes,28,rep,name=cycles,proto3" json:"cycles"`
	Shifts           []string `protobuf:"bytes,29,rep,name=shifts,proto3" json:"shifts"`
	Violations       []string `protobuf:"bytes,30,rep,name=violations,proto3" json:"violations"`
	Speed            int32    `protobuf:"varint,31,opt,name=speed,proto3" json:"speed"`
	DebugData        string   `protobuf:"bytes,32,opt,name=debug_data,json=debugData,proto3" json:"debug_data"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Log) GetIncrementId() int64 {
	if x != nil {
		return x.IncrementId
	}
	return 0
}

func (x *Log) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *Log) GetEventCode() int32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *Log) GetOriginCode() int32 {
	if x != nil {
		return x.OriginCode
	}
	return 0
}

func (x *Log) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Log) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *Log) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *Log) GetCoDriverId() string {
	if x != nil {
		return x.CoDriverId
	}
	return ""
}

func (x *Log) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetOdometer() float32 {
	if x != nil {
		return x.Odometer
	}
	return 0
}

func (x *Log) GetEngineHours() float32 {
	if x != nil {
		return x.EngineHours
	}
	return 0
}

func (x *Log) GetEldAddress() string {
	if x != nil {
		return x.EldAddress
	}
	return ""
}

func (x *Log) GetVinNumber() string {
	if x != nil {
		return x.VinNumber
	}
	return ""
}

func (x *Log) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Log) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Log) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *Log) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Log) GetShippingDocument() string {
	if x != nil {
		return x.ShippingDocument
	}
	return ""
}

func (x *Log) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *Log) GetDriverSign() string {
	if x != nil {
		return x.DriverSign
	}
	return ""
}

func (x *Log) GetCertifyTime() string {
	if x != nil {
		return x.CertifyTime
	}
	return ""
}

func (x *Log) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Log) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Log) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Log) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Log) GetUnitNumber() string {
	if x != nil {
		return x.UnitNumber
	}
	return ""
}

func (x *Log) GetCycles() []string {
	if x != nil {
		return x.Cycles
	}
	return nil
}

func (x *Log) GetShifts() []string {
	if x != nil {
		return x.Shifts
	}
	return nil
}

func (x *Log) GetViolations() []string {
	if x != nil {
		return x.Violations
	}
	return nil
}

func (x *Log) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Log) GetDebugData() string {
	if x != nil {
		return x.DebugData
	}
	return ""
}

type UpdateLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log                  *Log   `protobuf:"bytes,1,opt,name=log,proto3" json:"log"`
	EditBy               string `protobuf:"bytes,2,opt,name=edit_by,json=editBy,proto3" json:"edit_by"`
	Type                 string `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	AssignedFromDriverId string `protobuf:"bytes,4,opt,name=assigned_from_driver_id,json=assignedFromDriverId,proto3" json:"assigned_from_driver_id"`
	AssignedToDriverId   string `protobuf:"bytes,5,opt,name=assigned_to_driver_id,json=assignedToDriverId,proto3" json:"assigned_to_driver_id"`
}

func (x *UpdateLog) Reset() {
	*x = UpdateLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLog) ProtoMessage() {}

func (x *UpdateLog) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLog.ProtoReflect.Descriptor instead.
func (*UpdateLog) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateLog) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *UpdateLog) GetEditBy() string {
	if x != nil {
		return x.EditBy
	}
	return ""
}

func (x *UpdateLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateLog) GetAssignedFromDriverId() string {
	if x != nil {
		return x.AssignedFromDriverId
	}
	return ""
}

func (x *UpdateLog) GetAssignedToDriverId() string {
	if x != nil {
		return x.AssignedToDriverId
	}
	return ""
}

type CertifyLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log []*Log `protobuf:"bytes,1,rep,name=log,proto3" json:"log"`
}

func (x *CertifyLogRequest) Reset() {
	*x = CertifyLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyLogRequest) ProtoMessage() {}

func (x *CertifyLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyLogRequest.ProtoReflect.Descriptor instead.
func (*CertifyLogRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{4}
}

func (x *CertifyLogRequest) GetLog() []*Log {
	if x != nil {
		return x.Log
	}
	return nil
}

type LogListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*Log      `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count         int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	LogForm       *LogForm    `protobuf:"bytes,3,opt,name=log_form,json=logForm,proto3" json:"log_form"`
	CertifyLog    *CertifyLog `protobuf:"bytes,4,opt,name=certify_log,json=certifyLog,proto3" json:"certify_log"`
	Cycles        *CycleList  `protobuf:"bytes,5,opt,name=cycles,proto3" json:"cycles"`
	Shifts        *ShiftList  `protobuf:"bytes,6,opt,name=shifts,proto3" json:"shifts"`
	CompanyDriver *Driver     `protobuf:"bytes,7,opt,name=company_driver,json=companyDriver,proto3" json:"company_driver"`
}

func (x *LogListResponse) Reset() {
	*x = LogListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogListResponse) ProtoMessage() {}

func (x *LogListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogListResponse.ProtoReflect.Descriptor instead.
func (*LogListResponse) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{5}
}

func (x *LogListResponse) GetItems() []*Log {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LogListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LogListResponse) GetLogForm() *LogForm {
	if x != nil {
		return x.LogForm
	}
	return nil
}

func (x *LogListResponse) GetCertifyLog() *CertifyLog {
	if x != nil {
		return x.CertifyLog
	}
	return nil
}

func (x *LogListResponse) GetCycles() *CycleList {
	if x != nil {
		return x.Cycles
	}
	return nil
}

func (x *LogListResponse) GetShifts() *ShiftList {
	if x != nil {
		return x.Shifts
	}
	return nil
}

func (x *LogListResponse) GetCompanyDriver() *Driver {
	if x != nil {
		return x.CompanyDriver
	}
	return nil
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Break    int64  `protobuf:"varint,1,opt,name=break,proto3" json:"break"`
	Drive    int64  `protobuf:"varint,2,opt,name=drive,proto3" json:"drive"`
	Shift    int64  `protobuf:"varint,3,opt,name=shift,proto3" json:"shift"`
	Cycle    int64  `protobuf:"varint,4,opt,name=cycle,proto3" json:"cycle"`
	Recap    int64  `protobuf:"varint,5,opt,name=recap,proto3" json:"recap"`
	DriverId string `protobuf:"bytes,6,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	Status   string `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{6}
}

func (x *Timer) GetBreak() int64 {
	if x != nil {
		return x.Break
	}
	return 0
}

func (x *Timer) GetDrive() int64 {
	if x != nil {
		return x.Drive
	}
	return 0
}

func (x *Timer) GetShift() int64 {
	if x != nil {
		return x.Shift
	}
	return 0
}

func (x *Timer) GetCycle() int64 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

func (x *Timer) GetRecap() int64 {
	if x != nil {
		return x.Recap
	}
	return 0
}

func (x *Timer) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *Timer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Timer `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	Count int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
}

func (x *ListTimer) Reset() {
	*x = ListTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimer) ProtoMessage() {}

func (x *ListTimer) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimer.ProtoReflect.Descriptor instead.
func (*ListTimer) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{7}
}

func (x *ListTimer) GetItems() []*Timer {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTimer) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LogSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IncrementId      int64    `protobuf:"varint,2,opt,name=increment_id,json=incrementId,proto3" json:"increment_id"`
	EventType        int32    `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3" json:"event_type"`
	EventCode        int32    `protobuf:"varint,4,opt,name=event_code,json=eventCode,proto3" json:"event_code"`
	OriginCode       int32    `protobuf:"varint,5,opt,name=origin_code,json=originCode,proto3" json:"origin_code"`
	CompanyId        string   `protobuf:"bytes,6,opt,name=company_id,json=companyId,proto3" json:"company_id"`
	Unit             *Object  `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit"`
	DriverId         string   `protobuf:"bytes,8,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	CoDriverId       string   `protobuf:"bytes,9,opt,name=co_driver_id,json=coDriverId,proto3" json:"co_driver_id"`
	Address          *Address `protobuf:"bytes,10,opt,name=address,proto3" json:"address"`
	Odometer         float32  `protobuf:"fixed32,11,opt,name=odometer,proto3" json:"odometer"`
	EngineHours      float32  `protobuf:"fixed32,12,opt,name=engine_hours,json=engineHours,proto3" json:"engine_hours"`
	EldAddress       string   `protobuf:"bytes,13,opt,name=eld_address,json=eldAddress,proto3" json:"eld_address"`
	VinNumber        string   `protobuf:"bytes,14,opt,name=vin_number,json=vinNumber,proto3" json:"vin_number"`
	Status           string   `protobuf:"bytes,15,opt,name=status,proto3" json:"status"`
	Creator          string   `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator"`
	Trailer          string   `protobuf:"bytes,17,opt,name=trailer,proto3" json:"trailer"`
	Note             string   `protobuf:"bytes,18,opt,name=note,proto3" json:"note"`
	ShippingDocument string   `protobuf:"bytes,19,opt,name=shipping_document,json=shippingDocument,proto3" json:"shipping_document"`
	IsLocked         bool     `protobuf:"varint,20,opt,name=is_locked,json=isLocked,proto3" json:"is_locked"`
	DriverSign       string   `protobuf:"bytes,21,opt,name=driver_sign,json=driverSign,proto3" json:"driver_sign"`
	CertifyTime      string   `protobuf:"bytes,22,opt,name=certify_time,json=certifyTime,proto3" json:"certify_time"`
	StartTime        string   `protobuf:"bytes,23,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime          string   `protobuf:"bytes,24,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	CreatedAt        string   `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        string   `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *LogSingleResponse) Reset() {
	*x = LogSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSingleResponse) ProtoMessage() {}

func (x *LogSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSingleResponse.ProtoReflect.Descriptor instead.
func (*LogSingleResponse) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{8}
}

func (x *LogSingleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogSingleResponse) GetIncrementId() int64 {
	if x != nil {
		return x.IncrementId
	}
	return 0
}

func (x *LogSingleResponse) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *LogSingleResponse) GetEventCode() int32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *LogSingleResponse) GetOriginCode() int32 {
	if x != nil {
		return x.OriginCode
	}
	return 0
}

func (x *LogSingleResponse) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *LogSingleResponse) GetUnit() *Object {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *LogSingleResponse) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *LogSingleResponse) GetCoDriverId() string {
	if x != nil {
		return x.CoDriverId
	}
	return ""
}

func (x *LogSingleResponse) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LogSingleResponse) GetOdometer() float32 {
	if x != nil {
		return x.Odometer
	}
	return 0
}

func (x *LogSingleResponse) GetEngineHours() float32 {
	if x != nil {
		return x.EngineHours
	}
	return 0
}

func (x *LogSingleResponse) GetEldAddress() string {
	if x != nil {
		return x.EldAddress
	}
	return ""
}

func (x *LogSingleResponse) GetVinNumber() string {
	if x != nil {
		return x.VinNumber
	}
	return ""
}

func (x *LogSingleResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LogSingleResponse) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *LogSingleResponse) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *LogSingleResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *LogSingleResponse) GetShippingDocument() string {
	if x != nil {
		return x.ShippingDocument
	}
	return ""
}

func (x *LogSingleResponse) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *LogSingleResponse) GetDriverSign() string {
	if x != nil {
		return x.DriverSign
	}
	return ""
}

func (x *LogSingleResponse) GetCertifyTime() string {
	if x != nil {
		return x.CertifyTime
	}
	return ""
}

func (x *LogSingleResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *LogSingleResponse) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *LogSingleResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LogSingleResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DirectEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	EventType        int32        `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3" json:"event_type"`
	EventCode        int32        `protobuf:"varint,3,opt,name=event_code,json=eventCode,proto3" json:"event_code"`
	Coordinates      *Coordinates `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates"`
	Address          string       `protobuf:"bytes,5,opt,name=address,proto3" json:"address"`
	Odometer         float32      `protobuf:"fixed32,6,opt,name=odometer,proto3" json:"odometer"`
	EngineHours      float32      `protobuf:"fixed32,7,opt,name=engine_hours,json=engineHours,proto3" json:"engine_hours"`
	Note             string       `protobuf:"bytes,8,opt,name=note,proto3" json:"note"`
	ShippingDocument string       `protobuf:"bytes,9,opt,name=shipping_document,json=shippingDocument,proto3" json:"shipping_document"`
	Trailer          string       `protobuf:"bytes,10,opt,name=trailer,proto3" json:"trailer"`
	IsLocked         bool         `protobuf:"varint,11,opt,name=is_locked,json=isLocked,proto3" json:"is_locked"`
	State            string       `protobuf:"bytes,12,opt,name=state,proto3" json:"state"`
	Unit             *Object      `protobuf:"bytes,13,opt,name=unit,proto3" json:"unit"`
	StartTime        string       `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime          string       `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" json:"end_time"`
}

func (x *DirectEditRequest) Reset() {
	*x = DirectEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectEditRequest) ProtoMessage() {}

func (x *DirectEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectEditRequest.ProtoReflect.Descriptor instead.
func (*DirectEditRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{9}
}

func (x *DirectEditRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DirectEditRequest) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *DirectEditRequest) GetEventCode() int32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *DirectEditRequest) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *DirectEditRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DirectEditRequest) GetOdometer() float32 {
	if x != nil {
		return x.Odometer
	}
	return 0
}

func (x *DirectEditRequest) GetEngineHours() float32 {
	if x != nil {
		return x.EngineHours
	}
	return 0
}

func (x *DirectEditRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DirectEditRequest) GetShippingDocument() string {
	if x != nil {
		return x.ShippingDocument
	}
	return ""
}

func (x *DirectEditRequest) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *DirectEditRequest) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *DirectEditRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *DirectEditRequest) GetUnit() *Object {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *DirectEditRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DirectEditRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type LogCHangeHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AfterLog             []*Log `protobuf:"bytes,2,rep,name=after_log,json=afterLog,proto3" json:"after_log"`
	AfterDate            string `protobuf:"bytes,3,opt,name=after_date,json=afterDate,proto3" json:"after_date"`
	AssignedFromDriverId string `protobuf:"bytes,4,opt,name=assigned_from_driver_id,json=assignedFromDriverId,proto3" json:"assigned_from_driver_id"`
	AssignedToDriverId   string `protobuf:"bytes,5,opt,name=assigned_to_driver_id,json=assignedToDriverId,proto3" json:"assigned_to_driver_id"`
	BeforeLog            []*Log `protobuf:"bytes,6,rep,name=before_log,json=beforeLog,proto3" json:"before_log"`
	Date                 string `protobuf:"bytes,7,opt,name=date,proto3" json:"date"`
	DriverId             string `protobuf:"bytes,8,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	EditedById           string `protobuf:"bytes,9,opt,name=edited_by_id,json=editedById,proto3" json:"edited_by_id"`
	Status               string `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	Type                 string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`
	CreatedAt            string `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	BeforeDate           string `protobuf:"bytes,14,opt,name=before_date,json=beforeDate,proto3" json:"before_date"`
}

func (x *LogCHangeHistory) Reset() {
	*x = LogCHangeHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCHangeHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCHangeHistory) ProtoMessage() {}

func (x *LogCHangeHistory) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCHangeHistory.ProtoReflect.Descriptor instead.
func (*LogCHangeHistory) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{10}
}

func (x *LogCHangeHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogCHangeHistory) GetAfterLog() []*Log {
	if x != nil {
		return x.AfterLog
	}
	return nil
}

func (x *LogCHangeHistory) GetAfterDate() string {
	if x != nil {
		return x.AfterDate
	}
	return ""
}

func (x *LogCHangeHistory) GetAssignedFromDriverId() string {
	if x != nil {
		return x.AssignedFromDriverId
	}
	return ""
}

func (x *LogCHangeHistory) GetAssignedToDriverId() string {
	if x != nil {
		return x.AssignedToDriverId
	}
	return ""
}

func (x *LogCHangeHistory) GetBeforeLog() []*Log {
	if x != nil {
		return x.BeforeLog
	}
	return nil
}

func (x *LogCHangeHistory) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *LogCHangeHistory) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *LogCHangeHistory) GetEditedById() string {
	if x != nil {
		return x.EditedById
	}
	return ""
}

func (x *LogCHangeHistory) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LogCHangeHistory) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogCHangeHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LogCHangeHistory) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *LogCHangeHistory) GetBeforeDate() string {
	if x != nil {
		return x.BeforeDate
	}
	return ""
}

type ListLogCHangeHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32               `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Items []*LogCHangeHistory `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListLogCHangeHistory) Reset() {
	*x = ListLogCHangeHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogCHangeHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogCHangeHistory) ProtoMessage() {}

func (x *ListLogCHangeHistory) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogCHangeHistory.ProtoReflect.Descriptor instead.
func (*ListLogCHangeHistory) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{11}
}

func (x *ListLogCHangeHistory) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListLogCHangeHistory) GetItems() []*LogCHangeHistory {
	if x != nil {
		return x.Items
	}
	return nil
}

type LogForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver            *Object   `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver"`
	Codrivers         []*Object `protobuf:"bytes,2,rep,name=codrivers,proto3" json:"codrivers"`
	Units             []*Object `protobuf:"bytes,3,rep,name=units,proto3" json:"units"`
	Trailers          []string  `protobuf:"bytes,4,rep,name=trailers,proto3" json:"trailers"`
	ShippingDocuments []string  `protobuf:"bytes,5,rep,name=shipping_documents,json=shippingDocuments,proto3" json:"shipping_documents"`
	Signature         string    `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature"`
	Distance          float32   `protobuf:"fixed32,7,opt,name=distance,proto3" json:"distance"`
	CompanyAddress    string    `protobuf:"bytes,8,opt,name=company_address,json=companyAddress,proto3" json:"company_address"`
	TerminalAddress   string    `protobuf:"bytes,9,opt,name=terminal_address,json=terminalAddress,proto3" json:"terminal_address"`
}

func (x *LogForm) Reset() {
	*x = LogForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogForm) ProtoMessage() {}

func (x *LogForm) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogForm.ProtoReflect.Descriptor instead.
func (*LogForm) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{12}
}

func (x *LogForm) GetDriver() *Object {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *LogForm) GetCodrivers() []*Object {
	if x != nil {
		return x.Codrivers
	}
	return nil
}

func (x *LogForm) GetUnits() []*Object {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *LogForm) GetTrailers() []string {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *LogForm) GetShippingDocuments() []string {
	if x != nil {
		return x.ShippingDocuments
	}
	return nil
}

func (x *LogForm) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *LogForm) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *LogForm) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *LogForm) GetTerminalAddress() string {
	if x != nil {
		return x.TerminalAddress
	}
	return ""
}

type CertifyLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DriverId    string `protobuf:"bytes,2,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	DriverSign  string `protobuf:"bytes,3,opt,name=driver_sign,json=driverSign,proto3" json:"driver_sign"`
	CertifyTime string `protobuf:"bytes,4,opt,name=certify_time,json=certifyTime,proto3" json:"certify_time"`
	IsCertified bool   `protobuf:"varint,5,opt,name=is_certified,json=isCertified,proto3" json:"is_certified"`
}

func (x *CertifyLog) Reset() {
	*x = CertifyLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertifyLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertifyLog) ProtoMessage() {}

func (x *CertifyLog) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertifyLog.ProtoReflect.Descriptor instead.
func (*CertifyLog) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{13}
}

func (x *CertifyLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CertifyLog) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *CertifyLog) GetDriverSign() string {
	if x != nil {
		return x.DriverSign
	}
	return ""
}

func (x *CertifyLog) GetCertifyTime() string {
	if x != nil {
		return x.CertifyTime
	}
	return ""
}

func (x *CertifyLog) GetIsCertified() bool {
	if x != nil {
		return x.IsCertified
	}
	return false
}

type DriverLogsNdays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	StartTime     string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EventStatus   string `protobuf:"bytes,3,opt,name=event_status,json=eventStatus,proto3" json:"event_status"`
	EventLocation string `protobuf:"bytes,4,opt,name=event_location,json=eventLocation,proto3" json:"event_location"`
	UnitId        string `protobuf:"bytes,5,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`
	UnitNumber    string `protobuf:"bytes,6,opt,name=unit_number,json=unitNumber,proto3" json:"unit_number"`
	Timer         *Timer `protobuf:"bytes,7,opt,name=timer,proto3" json:"timer"`
	DriverId      string `protobuf:"bytes,8,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
}

func (x *DriverLogsNdays) Reset() {
	*x = DriverLogsNdays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverLogsNdays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverLogsNdays) ProtoMessage() {}

func (x *DriverLogsNdays) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverLogsNdays.ProtoReflect.Descriptor instead.
func (*DriverLogsNdays) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{14}
}

func (x *DriverLogsNdays) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriverLogsNdays) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DriverLogsNdays) GetEventStatus() string {
	if x != nil {
		return x.EventStatus
	}
	return ""
}

func (x *DriverLogsNdays) GetEventLocation() string {
	if x != nil {
		return x.EventLocation
	}
	return ""
}

func (x *DriverLogsNdays) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

func (x *DriverLogsNdays) GetUnitNumber() string {
	if x != nil {
		return x.UnitNumber
	}
	return ""
}

func (x *DriverLogsNdays) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *DriverLogsNdays) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type ListDriverLogsNdays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32              `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Items []*DriverLogsNdays `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListDriverLogsNdays) Reset() {
	*x = ListDriverLogsNdays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDriverLogsNdays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDriverLogsNdays) ProtoMessage() {}

func (x *ListDriverLogsNdays) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDriverLogsNdays.ProtoReflect.Descriptor instead.
func (*ListDriverLogsNdays) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{15}
}

func (x *ListDriverLogsNdays) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListDriverLogsNdays) GetItems() []*DriverLogsNdays {
	if x != nil {
		return x.Items
	}
	return nil
}

type CorrectionDutyLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log                  []*Log `protobuf:"bytes,1,rep,name=log,proto3" json:"log"`
	EditedById           string `protobuf:"bytes,2,opt,name=edited_by_id,json=editedById,proto3" json:"edited_by_id"`
	Type                 string `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	AssignedFromDriverId string `protobuf:"bytes,4,opt,name=assigned_from_driver_id,json=assignedFromDriverId,proto3" json:"assigned_from_driver_id"`
	AssignedToDriverId   string `protobuf:"bytes,5,opt,name=assigned_to_driver_id,json=assignedToDriverId,proto3" json:"assigned_to_driver_id"`
	StartTime            string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time"`
}

func (x *CorrectionDutyLog) Reset() {
	*x = CorrectionDutyLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectionDutyLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectionDutyLog) ProtoMessage() {}

func (x *CorrectionDutyLog) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectionDutyLog.ProtoReflect.Descriptor instead.
func (*CorrectionDutyLog) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{16}
}

func (x *CorrectionDutyLog) GetLog() []*Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *CorrectionDutyLog) GetEditedById() string {
	if x != nil {
		return x.EditedById
	}
	return ""
}

func (x *CorrectionDutyLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CorrectionDutyLog) GetAssignedFromDriverId() string {
	if x != nil {
		return x.AssignedFromDriverId
	}
	return ""
}

func (x *CorrectionDutyLog) GetAssignedToDriverId() string {
	if x != nil {
		return x.AssignedToDriverId
	}
	return ""
}

func (x *CorrectionDutyLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CorrectionDutyLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type ListCertifyLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32         `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Items []*CertifyLog `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ListCertifyLog) Reset() {
	*x = ListCertifyLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCertifyLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertifyLog) ProtoMessage() {}

func (x *ListCertifyLog) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertifyLog.ProtoReflect.Descriptor instead.
func (*ListCertifyLog) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{17}
}

func (x *ListCertifyLog) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListCertifyLog) GetItems() []*CertifyLog {
	if x != nil {
		return x.Items
	}
	return nil
}

type VerifyInsertLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId string `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
}

func (x *VerifyInsertLog) Reset() {
	*x = VerifyInsertLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyInsertLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyInsertLog) ProtoMessage() {}

func (x *VerifyInsertLog) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyInsertLog.ProtoReflect.Descriptor instead.
func (*VerifyInsertLog) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyInsertLog) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *VerifyInsertLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TimerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timer []*Timer `protobuf:"bytes,1,rep,name=timer,proto3" json:"timer"`
}

func (x *TimerList) Reset() {
	*x = TimerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerList) ProtoMessage() {}

func (x *TimerList) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerList.ProtoReflect.Descriptor instead.
func (*TimerList) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{19}
}

func (x *TimerList) GetTimer() []*Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

type GetTimerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverId []string `protobuf:"bytes,1,rep,name=driver_id,json=driverId,proto3" json:"driver_id"`
	Date     string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date"`
}

func (x *GetTimerList) Reset() {
	*x = GetTimerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimerList) ProtoMessage() {}

func (x *GetTimerList) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimerList.ProtoReflect.Descriptor instead.
func (*GetTimerList) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{20}
}

func (x *GetTimerList) GetDriverId() []string {
	if x != nil {
		return x.DriverId
	}
	return nil
}

func (x *GetTimerList) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type CycleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time []string `protobuf:"bytes,1,rep,name=time,proto3" json:"time"`
}

func (x *CycleList) Reset() {
	*x = CycleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleList) ProtoMessage() {}

func (x *CycleList) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleList.ProtoReflect.Descriptor instead.
func (*CycleList) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{21}
}

func (x *CycleList) GetTime() []string {
	if x != nil {
		return x.Time
	}
	return nil
}

type ShiftList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShiftTime []string `protobuf:"bytes,2,rep,name=shift_time,json=shiftTime,proto3" json:"shift_time"`
}

func (x *ShiftList) Reset() {
	*x = ShiftList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftList) ProtoMessage() {}

func (x *ShiftList) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftList.ProtoReflect.Descriptor instead.
func (*ShiftList) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{22}
}

func (x *ShiftList) GetShiftTime() []string {
	if x != nil {
		return x.ShiftTime
	}
	return nil
}

type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeFirst  string `protobuf:"bytes,1,opt,name=start_time_first,json=startTimeFirst,proto3" json:"start_time_first"`
	StartTimeSecond string `protobuf:"bytes,2,opt,name=start_time_second,json=startTimeSecond,proto3" json:"start_time_second"`
	Second          string `protobuf:"bytes,3,opt,name=second,proto3" json:"second"`
	DriverId        string `protobuf:"bytes,4,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{23}
}

func (x *TransferRequest) GetStartTimeFirst() string {
	if x != nil {
		return x.StartTimeFirst
	}
	return ""
}

func (x *TransferRequest) GetStartTimeSecond() string {
	if x != nil {
		return x.StartTimeSecond
	}
	return ""
}

func (x *TransferRequest) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *TransferRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	User          *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user"`
	Vehicle       *Object         `protobuf:"bytes,3,opt,name=vehicle,proto3" json:"vehicle"`
	Address       *CompanyAddress `protobuf:"bytes,4,opt,name=address,proto3" json:"address"`
	CoDriver      *Object         `protobuf:"bytes,5,opt,name=co_driver,json=coDriver,proto3" json:"co_driver"`
	LicenseState  *Object         `protobuf:"bytes,6,opt,name=license_state,json=licenseState,proto3" json:"license_state"`
	LicenceNumber string          `protobuf:"bytes,7,opt,name=licence_number,json=licenceNumber,proto3" json:"licence_number"`
	Signature     string          `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature"`
	Status        string          `protobuf:"bytes,9,opt,name=status,proto3" json:"status"`
	IsOnline      bool            `protobuf:"varint,10,opt,name=is_online,json=isOnline,proto3" json:"is_online"`
	DriverCompany *Company        `protobuf:"bytes,11,opt,name=driver_company,json=driverCompany,proto3" json:"driver_company"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{24}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Driver) GetVehicle() *Object {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *Driver) GetAddress() *CompanyAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Driver) GetCoDriver() *Object {
	if x != nil {
		return x.CoDriver
	}
	return nil
}

func (x *Driver) GetLicenseState() *Object {
	if x != nil {
		return x.LicenseState
	}
	return nil
}

func (x *Driver) GetLicenceNumber() string {
	if x != nil {
		return x.LicenceNumber
	}
	return ""
}

func (x *Driver) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Driver) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Driver) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *Driver) GetDriverCompany() *Company {
	if x != nil {
		return x.DriverCompany
	}
	return nil
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Usdot              int64  `protobuf:"varint,2,opt,name=usdot,proto3" json:"usdot"`
	TimeZone           string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone"`
	Title              string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	CompanyAddress     string `protobuf:"bytes,5,opt,name=company_address,json=companyAddress,proto3" json:"company_address"`
	TerminalAddress    string `protobuf:"bytes,6,opt,name=terminal_address,json=terminalAddress,proto3" json:"terminal_address"`
	Email              string `protobuf:"bytes,7,opt,name=email,proto3" json:"email"`
	PhoneNumber        string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	AccountingEmail    string `protobuf:"bytes,9,opt,name=accounting_email,json=accountingEmail,proto3" json:"accounting_email"`
	SafetyEmail        string `protobuf:"bytes,10,opt,name=safety_email,json=safetyEmail,proto3" json:"safety_email"`
	Status             string `protobuf:"bytes,11,opt,name=status,proto3" json:"status"`
	StatusChangeReason string `protobuf:"bytes,12,opt,name=status_change_reason,json=statusChangeReason,proto3" json:"status_change_reason"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{25}
}

func (x *Company) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Company) GetUsdot() int64 {
	if x != nil {
		return x.Usdot
	}
	return 0
}

func (x *Company) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *Company) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Company) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *Company) GetTerminalAddress() string {
	if x != nil {
		return x.TerminalAddress
	}
	return ""
}

func (x *Company) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Company) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Company) GetAccountingEmail() string {
	if x != nil {
		return x.AccountingEmail
	}
	return ""
}

func (x *Company) GetSafetyEmail() string {
	if x != nil {
		return x.SafetyEmail
	}
	return ""
}

func (x *Company) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Company) GetStatusChangeReason() string {
	if x != nil {
		return x.StatusChangeReason
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Email     string `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
	Phone     string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone"`
	Username  string `protobuf:"bytes,6,opt,name=username,proto3" json:"username"`
	Status    string `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	CompanyId string `protobuf:"bytes,8,opt,name=company_id,json=companyId,proto3" json:"company_id"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{26}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *User) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type NormalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Maxspeed string `protobuf:"bytes,2,opt,name=maxspeed,proto3" json:"maxspeed"`
	LogId    string `protobuf:"bytes,3,opt,name=log_id,json=logId,proto3" json:"log_id"`
	DriverId string `protobuf:"bytes,4,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
}

func (x *NormalizeRequest) Reset() {
	*x = NormalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeRequest) ProtoMessage() {}

func (x *NormalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeRequest.ProtoReflect.Descriptor instead.
func (*NormalizeRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{27}
}

func (x *NormalizeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NormalizeRequest) GetMaxspeed() string {
	if x != nil {
		return x.Maxspeed
	}
	return ""
}

func (x *NormalizeRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *NormalizeRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type LogsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleId string `protobuf:"bytes,1,opt,name=vehicleId,proto3" json:"vehicleId"`
	Document  string `protobuf:"bytes,2,opt,name=document,proto3" json:"document"`
	Trailer   string `protobuf:"bytes,3,opt,name=trailer,proto3" json:"trailer"`
}

func (x *LogsData) Reset() {
	*x = LogsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsData) ProtoMessage() {}

func (x *LogsData) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsData.ProtoReflect.Descriptor instead.
func (*LogsData) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{28}
}

func (x *LogsData) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *LogsData) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *LogsData) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

type BulkEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogsData *LogsData `protobuf:"bytes,1,opt,name=logsData,proto3" json:"logsData"`
	LogIds   []string  `protobuf:"bytes,2,rep,name=logIds,proto3" json:"logIds"`
}

func (x *BulkEditRequest) Reset() {
	*x = BulkEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkEditRequest) ProtoMessage() {}

func (x *BulkEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkEditRequest.ProtoReflect.Descriptor instead.
func (*BulkEditRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{29}
}

func (x *BulkEditRequest) GetLogsData() *LogsData {
	if x != nil {
		return x.LogsData
	}
	return nil
}

func (x *BulkEditRequest) GetLogIds() []string {
	if x != nil {
		return x.LogIds
	}
	return nil
}

type ReassignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
	LogIds     []string `protobuf:"bytes,2,rep,name=logIds,proto3" json:"logIds"`
	ToDriverId string   `protobuf:"bytes,3,opt,name=to_driver_id,json=toDriverId,proto3" json:"to_driver_id"`
	FromDriver string   `protobuf:"bytes,4,opt,name=from_driver,json=fromDriver,proto3" json:"from_driver"`
}

func (x *ReassignRequest) Reset() {
	*x = ReassignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eld_logs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReassignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignRequest) ProtoMessage() {}

func (x *ReassignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eld_logs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignRequest.ProtoReflect.Descriptor instead.
func (*ReassignRequest) Descriptor() ([]byte, []int) {
	return file_eld_logs_proto_rawDescGZIP(), []int{30}
}

func (x *ReassignRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReassignRequest) GetLogIds() []string {
	if x != nil {
		return x.LogIds
	}
	return nil
}

func (x *ReassignRequest) GetToDriverId() string {
	if x != nil {
		return x.ToDriverId
	}
	return ""
}

func (x *ReassignRequest) GetFromDriver() string {
	if x != nil {
		return x.FromDriver
	}
	return ""
}

var File_eld_logs_proto protoreflect.FileDescriptor

var file_eld_logs_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0xca, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x67, 0x70, 0x73, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x10, 0x66, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x22, 0xcb, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6c, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x42, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x11,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xe2, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x0a,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x65, 0x63, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x06, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f,
	0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6c,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xeb, 0x03, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed,
	0x03, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x43, 0x48, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x66, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x63,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x48, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x43,
	0x48, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x2d, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x8d, 0x02, 0x0a,
	0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x4e, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x4e, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x4e, 0x64, 0x61, 0x79, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x93, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x46,
	0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22,
	0x3f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x1f, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x2a, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x03, 0x0a,
	0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x22, 0x87, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x64, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x75, 0x73, 0x64, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd1, 0x01,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0x76, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0f, 0x42, 0x75, 0x6c,
	0x6b, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x18, 0x5a, 0x16,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eld_logs_proto_rawDescOnce sync.Once
	file_eld_logs_proto_rawDescData = file_eld_logs_proto_rawDesc
)

func file_eld_logs_proto_rawDescGZIP() []byte {
	file_eld_logs_proto_rawDescOnce.Do(func() {
		file_eld_logs_proto_rawDescData = protoimpl.X.CompressGZIP(file_eld_logs_proto_rawDescData)
	})
	return file_eld_logs_proto_rawDescData
}

var file_eld_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_eld_logs_proto_goTypes = []any{
	(*Coordinates)(nil),          // 0: event_service.Coordinates
	(*Address)(nil),              // 1: event_service.Address
	(*Log)(nil),                  // 2: event_service.Log
	(*UpdateLog)(nil),            // 3: event_service.UpdateLog
	(*CertifyLogRequest)(nil),    // 4: event_service.CertifyLogRequest
	(*LogListResponse)(nil),      // 5: event_service.LogListResponse
	(*Timer)(nil),                // 6: event_service.Timer
	(*ListTimer)(nil),            // 7: event_service.ListTimer
	(*LogSingleResponse)(nil),    // 8: event_service.LogSingleResponse
	(*DirectEditRequest)(nil),    // 9: event_service.DirectEditRequest
	(*LogCHangeHistory)(nil),     // 10: event_service.LogCHangeHistory
	(*ListLogCHangeHistory)(nil), // 11: event_service.ListLogCHangeHistory
	(*LogForm)(nil),              // 12: event_service.LogForm
	(*CertifyLog)(nil),           // 13: event_service.CertifyLog
	(*DriverLogsNdays)(nil),      // 14: event_service.DriverLogsNdays
	(*ListDriverLogsNdays)(nil),  // 15: event_service.ListDriverLogsNdays
	(*CorrectionDutyLog)(nil),    // 16: event_service.CorrectionDutyLog
	(*ListCertifyLog)(nil),       // 17: event_service.ListCertifyLog
	(*VerifyInsertLog)(nil),      // 18: event_service.VerifyInsertLog
	(*TimerList)(nil),            // 19: event_service.TimerList
	(*GetTimerList)(nil),         // 20: event_service.GetTimerList
	(*CycleList)(nil),            // 21: event_service.CycleList
	(*ShiftList)(nil),            // 22: event_service.ShiftList
	(*TransferRequest)(nil),      // 23: event_service.TransferRequest
	(*Driver)(nil),               // 24: event_service.Driver
	(*Company)(nil),              // 25: event_service.Company
	(*User)(nil),                 // 26: event_service.User
	(*NormalizeRequest)(nil),     // 27: event_service.NormalizeRequest
	(*LogsData)(nil),             // 28: event_service.LogsData
	(*BulkEditRequest)(nil),      // 29: event_service.BulkEditRequest
	(*ReassignRequest)(nil),      // 30: event_service.ReassignRequest
	(*Object)(nil),               // 31: event_service.Object
	(*CompanyAddress)(nil),       // 32: event_service.CompanyAddress
}
var file_eld_logs_proto_depIdxs = []int32{
	0,  // 0: event_service.Address.coordinates:type_name -> event_service.Coordinates
	0,  // 1: event_service.Address.eld_coordinates:type_name -> event_service.Coordinates
	0,  // 2: event_service.Address.gps_coordinates:type_name -> event_service.Coordinates
	0,  // 3: event_service.Address.fused_coordinates:type_name -> event_service.Coordinates
	1,  // 4: event_service.Log.address:type_name -> event_service.Address
	2,  // 5: event_service.UpdateLog.log:type_name -> event_service.Log
	2,  // 6: event_service.CertifyLogRequest.log:type_name -> event_service.Log
	2,  // 7: event_service.LogListResponse.items:type_name -> event_service.Log
	12, // 8: event_service.LogListResponse.log_form:type_name -> event_service.LogForm
	13, // 9: event_service.LogListResponse.certify_log:type_name -> event_service.CertifyLog
	21, // 10: event_service.LogListResponse.cycles:type_name -> event_service.CycleList
	22, // 11: event_service.LogListResponse.shifts:type_name -> event_service.ShiftList
	24, // 12: event_service.LogListResponse.company_driver:type_name -> event_service.Driver
	6,  // 13: event_service.ListTimer.items:type_name -> event_service.Timer
	31, // 14: event_service.LogSingleResponse.unit:type_name -> event_service.Object
	1,  // 15: event_service.LogSingleResponse.address:type_name -> event_service.Address
	0,  // 16: event_service.DirectEditRequest.coordinates:type_name -> event_service.Coordinates
	31, // 17: event_service.DirectEditRequest.unit:type_name -> event_service.Object
	2,  // 18: event_service.LogCHangeHistory.after_log:type_name -> event_service.Log
	2,  // 19: event_service.LogCHangeHistory.before_log:type_name -> event_service.Log
	10, // 20: event_service.ListLogCHangeHistory.items:type_name -> event_service.LogCHangeHistory
	31, // 21: event_service.LogForm.driver:type_name -> event_service.Object
	31, // 22: event_service.LogForm.codrivers:type_name -> event_service.Object
	31, // 23: event_service.LogForm.units:type_name -> event_service.Object
	6,  // 24: event_service.DriverLogsNdays.timer:type_name -> event_service.Timer
	14, // 25: event_service.ListDriverLogsNdays.items:type_name -> event_service.DriverLogsNdays
	2,  // 26: event_service.CorrectionDutyLog.log:type_name -> event_service.Log
	13, // 27: event_service.ListCertifyLog.items:type_name -> event_service.CertifyLog
	6,  // 28: event_service.TimerList.timer:type_name -> event_service.Timer
	26, // 29: event_service.Driver.user:type_name -> event_service.User
	31, // 30: event_service.Driver.vehicle:type_name -> event_service.Object
	32, // 31: event_service.Driver.address:type_name -> event_service.CompanyAddress
	31, // 32: event_service.Driver.co_driver:type_name -> event_service.Object
	31, // 33: event_service.Driver.license_state:type_name -> event_service.Object
	25, // 34: event_service.Driver.driver_company:type_name -> event_service.Company
	28, // 35: event_service.BulkEditRequest.logsData:type_name -> event_service.LogsData
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_eld_logs_proto_init() }
func file_eld_logs_proto_init() {
	if File_eld_logs_proto != nil {
		return
	}
	file_event_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eld_logs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CertifyLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LogListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LogSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DirectEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*LogCHangeHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListLogCHangeHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LogForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CertifyLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DriverLogsNdays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListDriverLogsNdays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CorrectionDutyLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListCertifyLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyInsertLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TimerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetTimerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CycleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ShiftList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*NormalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*LogsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*BulkEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eld_logs_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ReassignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eld_logs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eld_logs_proto_goTypes,
		DependencyIndexes: file_eld_logs_proto_depIdxs,
		MessageInfos:      file_eld_logs_proto_msgTypes,
	}.Build()
	File_eld_logs_proto = out.File
	file_eld_logs_proto_rawDesc = nil
	file_eld_logs_proto_goTypes = nil
	file_eld_logs_proto_depIdxs = nil
}
